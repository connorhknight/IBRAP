#' @examples
#'
#' # To plot if you supplied ground truth labels during becnhmarking
#' plot.cluster.benchmarking(object = object, assay = 'SCT', clustering = 'pca_nn.v1:louvain', ARI = T)
#'
#' # To plot if you didn't supplied ground truth labels during becnhmarking
#' plot.cluster.benchmarking(object = object, assay = 'SCT', clustering = 'pca_nn.v1:louvain', ARI = F)
#'
#' @export plot.cluster.benchmarking
plot.cluster.benchmarking <- function(object,
assay,
clustering,
ARI = F){
if(!is(object, 'IBRAP')) {
stop('object must be of class IBRAP \n')
}
if(!is.character(assay)) {
stop('assay must be character string \n')
} else if (is.character(assay)) {
if(!assay %in% names(object@methods)) {
stop('assay is not contained within object@methods \n')
}
}
if(!is.character(clustering)) {
stop('clustering must be a character string \n')
} else {
if(!clustering %in% names(object@methods[[assay]]@benchmark_results$clustering)) {
stop('clustering not contained within benchmark_results \n')
}
}
if(!is.logical(ARI)){
stop('ARI must be boolean. TRUE/FALSE \n')
}
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
clust.bench <- object@methods[[assay]]@benchmark_results$clustering[[clustering]]
clust.bench <- as.data.frame(clust.bench)
clust.bench[,'cluster_index'] <- rownames(clust.bench)
list.plot <- list()
for(o in 1:sum(length(colnames(clust.bench))-2)) {
label <- colnames(clust.bench)[o]
fig <- ggplot2::ggplot(clust.bench, ggplot2::aes_string(x = 'cluster_index', y = as.character(label), group = 1)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))
list.plot[[as.numeric(o)]] <- fig
}
last.label <- colnames(clust.bench)[sum(ncol(clust.bench)-1)]
last.fig <- ggplot2::ggplot(clust.bench, ggplot2::aes_string(x = 'cluster_index', y = as.character(last.label), group = 1)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))
list.plot[[sum(ncol(clust.bench)-1)]] <- last.fig
do.call('ggarrange.tmp', c(plots = list.plot, ncol = sum(ncol(clust.bench)-1)))
}
plot.cluster.benchmarking(object = marrow_A, assay = 'SCT', clustering = 'PCA_NN:LOUVAIN')
plot.cluster.benchmarking(object = marrow_A, assay = 'SCT',
clustering = 'PCA_NN:LOUVAIN')
plot.cluster.benchmarking(object = marrow_A, assay = 'SCT',
clustering = 'PCA_NN:LOUVAIN')
plot.cluster.benchmarking(object = marrow_A, assay = 'SCT',
clustering = 'PCA_NN:LOUVAIN')
plot1 <- plot.reduced.dim(object = bmmc,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'PCA_NN:LOUVAIN',
column = 'neighbourhood_graph_res.0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCT') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot1 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'PCA_NN:LOUVAIN',
column = 'neighbourhood_graph_res.0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCT') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
colnames(marrow_A@methods$SCT@cluster_assignments$`PCA_NN:LOUVAIN`)
plot1 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res.0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCT') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
colnames(marrow_A@methods$SCT@cluster_assignments$`PCA_NN:LOUVAIN`)
plot1 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCT') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot2 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCRAN',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCRAN') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot3 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCANPY',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCANPY') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot1 + plot2 + plot3
DE_res <- perform.diffexp.all(object = samp,
assay = 'SCT', clust.method =
test = 'MAST')
DE_res <- perform.diffexp.all(object = samp,
assay = 'SCT',
test = 'MAST',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8')
DE_res <- perform.diffexp.all(object = marrow_A,
assay = 'SCT',
test = 'MAST',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8')
DE_res <- perform.diffexp.all(object = marrow_A,
assay = 'SCT',
test = 'wilcox',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8')
DE_res
plot.features(object = marrow_A, assay = 'SCT', reduction = 'pca_umap',
features = c('JCHAIN','MS4A1','MME','IRF8','HLA-DRA','LYZ',
'ELANE','ALAS2','CD34','NKG7','CCR7','IL7R','GZMK'),
pt_size = 1,
slot = 'normalised')
plot.features(object = marrow_A, assay = 'SCT', reduction = 'PCA_UMAP',
features = c('JCHAIN','MS4A1','MME','IRF8','HLA-DRA','LYZ',
'ELANE','ALAS2','CD34','NKG7','CCR7','IL7R','GZMK'),
pt_size = 1,
slot = 'normalised')
#' @name showObjectContents
#' @aliases showObjectContents
#'
#' @title Shows the contents in your IBRAP object
#'
#' @param object IBRAP S4 class object
#' @param assay Character. String containing which assays to show
#'
#' @return Prints out the contents of the supplied assays
#'
#' @examples
#'
#' @export showObjectContents
showObjectContents <- function(object, assay) {
for(x in assay) {
cat(crayon::cyan( x, ' contains:\n'))
cat(crayon::cyan('counts\n'))
cat(crayon::cyan('normalised\n'))
cat(crayon::cyan('norm.scaled\n'))
cat(crayon::cyan('computational_reductions: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@computational_reductions), collapse = ', '), '\n'))
cat(crayon::cyan('integration_reductions: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@integration_reductions), collapse = ', '), '\n'))
cat(crayon::cyan('visualisation_reductions: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@visualisation_reductions), collapse = ', '), '\n'))
cat(crayon::cyan('neighbourhood: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@neighbours), collapse = ', '), '\n'))
cat(crayon::cyan('cluster_assignments: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@cluster_assignments), collapse = ', '), '\n'))
cat(crayon::cyan('benchmarking_results: '))
cat(crayon::cyan(paste0(names(object@methods[[x]]@benchmark_results), collapse = ', '), '\n'))
cat(crayon::cyan('          \n'))
}
}
FetchResults <- function(object, assay, assay.slot, column) {
return(object@methods[[assay]][[assay.slot]][,column])
}
FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', column = 'res_0.8')
object@methods[['SCT']][['cluster_assignments']]
FetchResults <- function(object, assay, assay.slot, sub.slot.name, column) {
return(object@methods[[assay]][[assay.slot]][[sub.slot.name]][,column])
}
FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
showObjectContents(marrow_A, 'SCT')
FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'benchmarking_results', sub.slot.name = 'clustering', column = 'res_0.8')
FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'benchmarking_results', sub.slot.name = 'clustering', column = 'PCA_NN:LOUVAIN')
marrow_A@methods$SCT@benchmark_results$clustering$`PCA_NN:LOUVAIN`
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] <- 'plasma'
clusters[clusters == '17'] <- 'immature B cells'
clusters[clusters == '11'] <- 'pro B cells'
clusters[clusters == '14'] <- 'dendritic cells'
clusters[clusters == '15'] <- 'dendritic cells'
clusters[clusters == '1'] = 'monocytes/macrophage'
clusters[clusters == '10'] = 'monocytes/macrophage'
clusters[clusters == '6'] = 'neutrophil'
clusters[clusters == '5'] = 'erythrocytes'
clusters[clusters == '8'] = 'erythrocytes'
clusters[clusters == '9'] = 'erythrocytes'
clusters[clusters == '12'] = 'erythrocytes'
clusters[clusters == '16'] = 'erythrocytes'
clusters[clusters == '3'] = 'HSPCs'
clusters[clusters == '4'] = 'NK cells'
clusters[clusters == '0'] = 'CD4+ T cells'
clusters[clusters == '2'] = 'CD8+ naive T cells'
clusters[clusters == '13'] = 'CD8+ naive T cells'
clusters[clusters == '7'] = 'CD8+ cytotoxic T cells'
# and we are going to simply put the cell types into our metadata
marrow_A@sample_metadata$celltypes <- clusters
plot.reduced.dim(object = marrow_A,
reduction = 'pca_umap',
assay = 'SCT',
clust.method = 'metadata',
column = 'celltypes',
pt.size = 0.1)
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] <- 'plasma'
clusters[clusters == '17'] <- 'immature B cells'
clusters[clusters == '11'] <- 'pro B cells'
clusters[clusters == '14'] <- 'dendritic cells'
clusters[clusters == '15'] <- 'dendritic cells'
clusters[clusters == '1'] = 'monocytes/macrophage'
clusters[clusters == '10'] = 'monocytes/macrophage'
clusters[clusters == '6'] = 'neutrophil'
clusters[clusters == '5'] = 'erythrocytes'
clusters[clusters == '8'] = 'erythrocytes'
clusters[clusters == '9'] = 'erythrocytes'
clusters[clusters == '12'] = 'erythrocytes'
clusters[clusters == '16'] = 'erythrocytes'
clusters[clusters == '3'] = 'HSPCs'
clusters[clusters == '4'] = 'NK cells'
clusters[clusters == '0'] = 'CD4+ T cells'
clusters[clusters == '2'] = 'CD8+ naive T cells'
clusters[clusters == '13'] = 'CD8+ naive T cells'
clusters[clusters == '7'] = 'CD8+ cytotoxic T cells'
# and we are going to simply put the cell types into our metadata
marrow_A@sample_metadata$celltypes <- clusters
plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'metadata',
column = 'celltypes',
pt.size = 0.1)
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] <- 'plasma'
clusters[clusters == '17'] <- 'immature B cells'
clusters[clusters == '11'] <- 'pro B cells'
clusters[clusters == '14'] <- 'dendritic cells'
clusters[clusters == '15'] <- 'dendritic cells'
clusters[clusters == '1'] = 'monocytes/macrophage'
clusters[clusters == '10'] = 'monocytes/macrophage'
clusters[clusters == '6'] = 'neutrophil'
clusters[clusters == '5'] = 'erythrocytes'
clusters[clusters == '8'] = 'erythrocytes'
clusters[clusters == '9'] = 'erythrocytes'
clusters[clusters == '12'] = 'erythrocytes'
clusters[clusters == '16'] = 'erythrocytes'
clusters[clusters == '3'] = 'HSPCs'
clusters[clusters == '4'] = 'NK cells'
clusters[clusters == '0'] = 'CD4+ T cells'
clusters[clusters == '2'] = 'CD8+ naive T cells'
clusters[clusters == '13'] = 'CD8+ naive T cells'
clusters[clusters == '7'] = 'CD8+ cytotoxic T cells'
# and we are going to simply put the cell types into our metadata
print(clusters)
marrow_A@sample_metadata$celltypes <- clusters
plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'metadata',
column = 'celltypes',
pt.size = 0.1)
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] <- 'plasma'
clusters[clusters == '17'] <- 'immature B cells'
clusters[clusters == '11'] <- 'pro B cells'
clusters[clusters == '14'] <- 'dendritic cells'
clusters[clusters == '15'] <- 'dendritic cells'
clusters[clusters == '1'] = 'monocytes/macrophage'
clusters[clusters == '10'] = 'monocytes/macrophage'
clusters[clusters == '6'] = 'neutrophil'
clusters[clusters == '5'] = 'erythrocytes'
clusters[clusters == '8'] = 'erythrocytes'
clusters[clusters == '9'] = 'erythrocytes'
clusters[clusters == '12'] = 'erythrocytes'
clusters[clusters == '16'] = 'erythrocytes'
clusters[clusters == '3'] = 'HSPCs'
clusters[clusters == '4'] = 'NK cells'
clusters[clusters == '0'] = 'CD4+ T cells'
clusters[clusters == '2'] = 'CD8+ naive T cells'
clusters[clusters == '13'] = 'CD8+ naive T cells'
clusters[clusters == '7'] = 'CD8+ cytotoxic T cells'
clusters
FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
clusters
clusters[clusters == 18] = 'plasma'
clusters
clusters[clusters == 17] = 'immature B cells'
clusters
clusters <- FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8')
clusters[clusters == 18]
class(clusters)
clusters <- as.numeric(FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8'))
clusters[clusters == 18] = 'plasma'
clusters <- as.character(FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8'))
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] = 'plasma'
clusters[clusters == '17'] = 'immature B cells'
clusters[clusters == '11'] = 'pro B cells'
clusters[clusters == '14'] = 'dendritic cells'
clusters[clusters == '15'] - 'dendritic cells'
clusters <- as.character(FetchResults(object = marrow_A, assay = 'SCT', assay.slot = 'cluster_assignments', sub.slot.name = 'PCA_NN:LOUVAIN', column = 'res_0.8'))
# here we are replacing the clusters with their cell types
clusters[clusters == '18'] = 'plasma'
clusters[clusters == '17'] = 'immature B cells'
clusters[clusters == '11'] = 'pro B cells'
clusters[clusters == '14'] = 'dendritic cells'
clusters[clusters == '15'] = 'dendritic cells'
clusters[clusters == '1'] = 'monocytes/macrophage'
clusters[clusters == '10'] = 'monocytes/macrophage'
clusters[clusters == '6'] = 'neutrophil'
clusters[clusters == '5'] = 'erythrocytes'
clusters[clusters == '8'] = 'erythrocytes'
clusters[clusters == '9'] = 'erythrocytes'
clusters[clusters == '12'] = 'erythrocytes'
clusters[clusters == '16'] = 'erythrocytes'
clusters[clusters == '3'] = 'HSPCs'
clusters[clusters == '4'] = 'NK cells'
clusters[clusters == '0'] = 'CD4+ T cells'
clusters[clusters == '2'] = 'CD8+ naive T cells'
clusters[clusters == '13'] = 'CD8+ naive T cells'
clusters[clusters == '7'] = 'CD8+ cytotoxic T cells'
# and we are going to simply put the cell types into our metadata
print(clusters)
marrow_A@sample_metadata$celltypes <- clusters
plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'metadata',
column = 'celltypes',
pt.size = 0.1)
setwd("~/Desktop")
save.image("~/Desktop/single.RData")
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX/R")
roxygen2::roxygenise()
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX")
roxygen2::roxygenise()
roxygen2::roxygenise()
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("stringr")
install.packages("stringr")
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("IBRAP", lib="~/Library/R/4.0/library")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github('connorhknight/IBRAP')
setwd("~/Desktop")
marrow_A <- readRDS('~/path/to/marrow_A')
marrow_A <- readRDS('~/path/to/marrow_A/marrow_A.rds')
load("~/Desktop/single.RData")
setwd("~/work/Results/scRNA-seq/IBRAP_tutorials/single_sample")
saveRDS(object = marrow_A, file = 'marrow_A.rds', compress = T)
pwd
getwd()
saveRDS(object = DE_res, file = 'marrow_A_DE.rds', compress = T)
plot1 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCT',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCT') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot2 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCRAN',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCRAN') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
plot3 <- plot.reduced.dim(object = marrow_A,
reduction = 'PCA_UMAP',
assay = 'SCANPY',
clust.method = 'PCA_NN:LOUVAIN',
column = 'res_0.8', pt.size = 0.1) +
ggplot2::ggtitle('SCANPY') +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5))
egg::ggarrange(plots = list(plot1 + plot2 + plot3), nrow = 3)
plot1
plot1+plot2+plot3
bigplot <- plot1+plot2+plot3
library('SeuratData')
panc8 <- LoadData('panc8')
smartseq2.counts <- panc8@assays$RNA@counts[,panc8@meta.data$dataset=='smartseq2']
smartseq2.meta <- panc8@meta.data[panc8@meta.data$dataset=='smartseq2',]
celseq2.counts <- panc8@assays$RNA@counts[,panc8@meta.data$dataset=='celseq2']
celseq2.meta <- panc8@meta.data[panc8@meta.data$dataset=='celseq2',]
dim(celseq2.counts)
dim(smartseq2.counts)
rm(panc8)
smartseq2 <- createIBRAPobject(counts = smartseq2.counts,
original.project = 'smartseq2',
add.suffix = T,
meta.data = smartseq2.meta, min.cells = 3, min.features = 200, verbose = T)
celseq2 <- createIBRAPobject(counts = celseq2.counts,
original.project = 'celseq2',
add.suffix = T,
meta.data = celseq2.meta, min.cells = 3, min.features = 200, verbose = T)
marrow_A <- filter_IBRAP(object = marrow_A, RAW_total.features < 3000 & RAW_percent.mt < 8)
pancreas <- merge(x = smartseq2, celseq2)
saveRDS(object = list(samples='celseq2',counts=celseq2.counts, metadata=celseq2.meta), file = 'celseq2.rds', compress = T)
saveRDS(object = list(samples='smartseq2',counts=celseq2.counts, metadata=smartseq2.meta), file = '~/smartseq2.rds', compress = T)
saveRDS(object = list(samples='celseq2',counts=celseq2.counts, metadata=celseq2.meta), file = '~/celseq2.rds', compress = T)
pancreas <- perform.sct(object = pancreas, verbose = T, conserve.memory=T)
pancreas <- perform.scran(object = pancreas, vars.to.regress = 'RAW_total.counts', verbose = T)
pancreas <- perform.scanpy(object = pancreas, vars.to.regress = 'RAW_total.counts', verbose = T)
pancreas <- perform.pca(object = pancreas, assay = c('SCT','SCRAN','SCANPY'), print.variance = F)
pancreas <- perform.scanorama(object = pancreas, assay = c('SCT','SCRAN','SCANPY'),
batch = 'original.project', verbose = T)
pancreas <- perform.harmony(object = pancreas, assay = c('SCT','SCRAN','SCANPY'),
reduction = 'PCA', batch = 'original.project', verbose = T)
celseq2_items <- readRDS('/Users/knight05/work/Results/scRNA-seq/IBRAP_tutorials/integration_analysis/celseq2.rds')
smartseq2_items <- readRDS('/Users/knight05/work/Results/scRNA-seq/IBRAP_tutorials/integration_analysissmartseq2.rds')
celseq2_items <- readRDS('/Users/knight05/work/Results/scRNA-seq/IBRAP_tutorials/integration_analysis/celseq2.rds')
smartseq2_items <- readRDS('/Users/knight05/work/Results/scRNA-seq/IBRAP_tutorials/integration_analysis/smartseq2.rds')
pancreas <- benchmark.integration(object = pancreas,
batch = 'original.project', assays = c('SCT','SCRAN','SCANPY'),
reduction = c('PCA_UMAP', 'PCA_HARMONY_UMAP',
'SCANORAMA_UMAP'),
result.names = c('uncorrected', 'harmony', 'scanorama'),
n.components = 2)
pancreas <- benchmark.intergation(object = pancreas,
batch = 'original.project', assays = c('SCT','SCRAN','SCANPY'),
reduction = c('PCA_UMAP', 'PCA_HARMONY_UMAP',
'SCANORAMA_UMAP'),
result.names = c('uncorrected', 'harmony', 'scanorama'),
n.components = 2)
pancreas <- perform.umap(object = pancreas, assay = c('SCT','SCRAN','SCANPY','TPM'),
reduction = c('SCANORAMA','PCA_HARMONY','PCA'), verbose = F)
pancreas <- perform.umap(object = pancreas, assay = c('SCT','SCRAN','SCANPY'),
reduction = c('SCANORAMA','PCA_HARMONY','PCA'), verbose = F)
pancreas <- benchmark.integration(object = pancreas,
batch = 'original.project', assays = c('SCT','SCRAN','SCANPY'),
reduction = c('PCA_UMAP', 'PCA_HARMONY_UMAP',
'SCANORAMA_UMAP'),
result.names = c('uncorrected', 'harmony', 'scanorama'),
n.components = 2)
pancreas <- benchmark.intergation(object = pancreas,
batch = 'original.project', assays = c('SCT','SCRAN','SCANPY'),
reduction = c('PCA_UMAP', 'PCA_HARMONY_UMAP',
'SCANORAMA_UMAP'),
result.names = c('uncorrected', 'harmony', 'scanorama'),
n.components = 2)
pancreas@methods$SCT@benchmark_results$integration
getwd()
saveRDS(object = pancreas, file = 'pancreas.rds', compress = T)
plot.features(object = pancreas, assay = c('SCRAN'), slot = 'normalised', reduction = 'seurat_umap', features = c('PPY','GHRL','TPSB2',
'PLVAP','RGS5','CLPS',
'COL1A1','CCL22', 'INS',
'SPP1','NOV','SST','GCG'))
plot.integration.benchmarking(object = pancreas, c('SCT','SCRAN','SCANPY'))
plot.reduced.dim(object = pancreas, reduction = 'PCA_HARMONY_UMAP', assay = 'SCRAN',
clust.method = 'metadata', column = 'celltype', pt.size = 0.1)
plot.reduced.dim(object = pancreas, reduction = 'PCA_HARMONY_UMAP', assay = 'SCANPY',
clust.method = 'metadata', column = 'celltype', pt.size = 0.1)
plot.reduced.dim(object = pancreas, reduction = 'SCANORAMA_UMAP', assay = 'SCANPY',
clust.method = 'metadata', column = 'celltype', pt.size = 0.1)
pkgdown::build_site()
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX")
pkgdown::build_site()
pkgdown::build_article()
pkgdown::build_article()
warnings()
save.image("~/Desktop/tutorial.RData")
pkgdown::build_article()
pkgdown::build_article()
pkgdown::build_article()
pkgdown::build_article()
pkgdown::build_article()
install.packages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
pkgdown::build_article()
pkgdown::build_article(name = Getting Started)
pkgdown::build_article(name = 'Getting Started')
pkgdown::build_site()
pkgdown::build_article(name = 'Getting Started')
pkgdown::build_site()
options(ragg.max_dim = 5000000px)
options(ragg.max_dim = '5000000px')
pkgdown::build_site()
load("~/Desktop/tutorial.RData")
marrow_A@pipelines
celseq2
marrow_A <- readRDS("~/work/Results/scRNA-seq/IBRAP_tutorials/single_sample/marrow_A.rds")
marrow_A@pipelines
View(marrow_A@pipelines)
showObjectContents(object = IBRAP, assay = c('SCT','SCRAN','SCANPY'))
showObjectContents(object = marrow_A, assay = c('SCT','SCRAN','SCANPY'))
showObjectContents(object = marrow_A, assay = c('SCT','SCRAN','SCANPY'))
showObjectContents(object = marrow_A, assay = c('SCT','SCRAN','SCANPY'))
marrow_A@pipelines
