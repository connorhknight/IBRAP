setwd("~/work/Results/scRNA-seq/IBRAP_publication/new_figures/Scripts/integrated")
integrated <- readRDS('integration_analyses.rds')
datasets <- names(integrated)
norm.methods <- c('RAW', 'SCT', 'SCRAN', 'SCANPY')
clust.methods <- names(integrated$pancreas@methods$SCT@benchmark_results$clustering)
count <- 1
all_results <- data.frame(sample = character(), normalisation = character(), preprocessing = character(),
parameter = character(), ARI = numeric(), NMI = numeric(), ASW = numeric())
for(x in datasets) {
print(x)
for(t in 2:4) {
for(u in seq_along(clust.methods)) {
row.nam <- rownames(integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]])
counter <- 1
for(m in rownames(integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]])) {
all_results[count, 'sample'] <- x
all_results[count, 'normalisation'] <- norm.methods[t]
all_results[count, 'preprocessing'] <- clust.methods[u]
all_results[count, 'parameter'] <- row.nam[counter]
# print(clust.methods[u])
if(is.na(integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]][m,4])) {
print('bump')
}
all_results[count, 'ARI'] <- integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]][m,4]
all_results[count, 'NMI'] <- integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]][m,5]
all_results[count, 'ASW'] <- integrated[[x]]@methods[[t]]@benchmark_results[['clustering']][[clust.methods[[u]]]][m,1]
count <- count + 1
counter <- counter + 1
}
}
}
}
all_results <- all_results[order(all_results$sample),]
list.of.results <- list()
for(i in datasets) {
list.of.results[[i]] <- all_results[all_results$sample==i,]
}
for(i in datasets) {
list.of.results[[i]]$ARI_rank <- rank(list.of.results[[i]]$ARI)
list.of.results[[i]]$NMI_rank <- rank(list.of.results[[i]]$NMI)
list.of.results[[i]]$ASW_rank <- rank(list.of.results[[i]]$ASW)
}
for(i in datasets) {
list.of.results[[i]]$Score <- apply(X = list.of.results[[i]][,c('ARI_rank','NMI_rank','ASW_rank')], MARGIN = 1, FUN = function(x) {
mean(x)
})
}
all_results <- do.call(rbind, list.of.results)
tempo <- strsplit(x = all_results[grepl(pattern = 'neighbourhood', all_results$parameter),]$parameter, split = '_')
tempor <- list()
count <- 1
for(u in tempo) {
tempor[[count]] <- tempo[[count]][3]
count <- count + 1
}
all_results[grepl(pattern = 'neighbourhood', all_results$parameter),]$parameter <- unlist(tempor)
all_results$Score_scaled <- 100
for(x in unique(all_results$sample)) {
all_results[all_results$sample==x,]$Score_scaled <- scales::rescale(x = all_results[all_results$sample==x,]$Score, to = c(0,100))
}
all_results$Score_percent <- all_results$Score/1172*100
all_results$integration = ''
all_results$integration[grepl(pattern = 'HARMONY', x = all_results$preprocessing)] = 'HARMONY'
all_results$integration[grepl(pattern = 'SCANORAMA', x = all_results$preprocessing)] = 'SCANORAMA'
all_results$integration[grepl(pattern = 'CCA', x = all_results$preprocessing)] = 'SEURAT CCA'
all_results$integration[grepl(pattern = 'BBKNN', x = all_results$preprocessing)] = 'BBKNN'
all_results$integration[all_results$integration==''] = 'UNCORRECTED'
all_results$preprocessing <- gsub(x = all_results$preprocessing, pattern = '_BENCHMARKED', replacement = '')
all_results$integration_ASW = 0
for(x in unique(all_results$sample)[1:3]) {
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_seurat
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_seurat
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_seurat
}
for(x in unique(all_results$sample)[4:5]) {
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCT'] = integrated[[x]]@methods$SCT@benchmark_results$integration$SCT_cca
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCRAN'] = integrated[[x]]@methods$SCRAN@benchmark_results$integration$SCRAN_cca
all_results$integration_ASW[all_results$sample==x & all_results$integration=='UNCORRECTED' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_uncorrected
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SCANORAMA' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_scanorama
all_results$integration_ASW[all_results$sample==x & all_results$integration=='BBKNN' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_bbknn
all_results$integration_ASW[all_results$sample==x & all_results$integration=='HARMONY' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_harmony
all_results$integration_ASW[all_results$sample==x & all_results$integration=='SEURAT CCA' & all_results$normalisation == 'SCANPY'] = integrated[[x]]@methods$SCANPY@benchmark_results$integration$SCANPY_cca
}
all_results$clustering_type[grepl(pattern = 'LOUVAIN', x = all_results$preprocessing)] = 'Graph-based'
all_results$clustering_type[grepl(pattern = 'LOUVAINMLR', x = all_results$preprocessing)] = 'Graph-based'
all_results$clustering_type[grepl(pattern = 'SLM', x = all_results$preprocessing)] = 'Graph-based'
all_results$clustering_type[grepl(pattern = 'LEIDEN', x = all_results$preprocessing)] = 'Graph-based'
all_results$clustering_type[all_results$clustering_type==''] = 'Non-graph-based'
plot1 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ARI), max(all_results$ARI))
plot2 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 1') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot3 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method"))  + ylim(min(all_results$ASW), max(all_results$ASW))
plot1 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ARI), max(all_results$ARI))
plot2 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 1') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot3 <- ggplot(data = all_results[all_results=='pancreas',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method"))  + ylim(min(all_results$ASW), max(all_results$ASW))
pancreas_int <- ggpubr::ggarrange(plot1,plot2,plot3,nrow = 1, ncol = 3, common.legend = T)
pancreas_int <- ggpubr::ggarrange(plot1,plot2,plot3,nrow = 1, ncol = 3, common.legend = T)
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 400, height = 400, dpi = 'retina')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 400, height = 400, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 200, height = 200, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 2000, height = 2000, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 2000, height = 1000, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 2000, height = 1200, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 2200, height = 1200, dpi = 'retina', units = 'px')
plot4 <- ggplot(data = all_results[all_results=='equal',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ARI), max(all_results$ARI))
plot5 <- ggplot(data = all_results[all_results=='equal',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 2') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot6 <- ggplot(data = all_results[all_results=='equal',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ASW), max(all_results$ASW))
ggpubr::ggarrange(plot4,plot5,plot6,nrow = 1, ncol = 3, common.legend = T)
plot7 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method"))  + ylim(min(all_results$ARI), max(all_results$ARI))
plot8 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 3') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot9 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ASW), max(all_results$ASW))
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 3200, height = 2400, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 3200, height = 1200, dpi = 'retina', units = 'px')
ggsave(filename = 'pancreas_int.tiff', plot = pancreas_int, width = 3200, height = 1200, dpi = 'retina', units = 'px')
equal_int <- ggsave(filename = 'equal_int.tiff', plot = pancreas_int, width = 3200, height = 1000, dpi = 'retina', units = 'px')
plot7 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method"))  + ylim(min(all_results$ARI), max(all_results$ARI))
plot8 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 3') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot9 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ASW), max(all_results$ASW))
unequal_int <- ggpubr::ggarrange(plot7,plot8,plot9,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
unequal_int <- ggpubr::ggarrange(plot7,plot8,plot9,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
ggsave(filename = 'unequal_int.tiff', plot = unequal_int, width = 3200, height = 1000, dpi = 'retina', units = 'px')
plot10 <- ggplot(data = all_results[all_results=='symsim_simulations_1',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ARI), max(all_results$ARI))
plot11 <- ggplot(data = all_results[all_results=='symsim_simulations_1',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 4') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot12 <- ggplot(data = all_results[all_results=='symsim_simulations_1',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ASW), max(all_results$ASW))
symsim_1 <- ggpubr::ggarrange(plot10,plot11,plot12,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
symsim_1 <- ggpubr::ggarrange(plot10,plot11,plot12,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
ggsave(filename = 'symsim1_int.tiff', plot = symsim_1, width = 3200, height = 1000, dpi = 'retina', units = 'px')
equal_int <- ggpubr::ggarrange(plot4,plot5,plot6,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
ggsave(filename = 'equal_int.tiff', plot = equal_int, width = 3200, height = 1200, dpi = 'retina', units = 'px')
plot7 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ARI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ARI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method"))  + ylim(min(all_results$ARI), max(all_results$ARI))
plot8 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = NMI, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('Analysis 3') +
ylab('NMI') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$NMI), max(all_results$NMI))
plot9 <- ggplot(data = all_results[all_results=='unequal',],
mapping = aes(y = ASW, x = integration, fill = normalisation)) +
geom_boxplot(na.rm = TRUE) +
theme_classic() +
ggtitle('') +
ylab('ASW') + xlab('') +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 12),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 15)) +
guides(fill=guide_legend(title="Normalisation Method")) + ylim(min(all_results$ASW), max(all_results$ASW))
unequal_int <- ggpubr::ggarrange(plot7,plot8,plot9,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
ggsave(filename = 'unequal_int.tiff', plot = unequal_int, width = 3200, height = 1000, dpi = 'retina', units = 'px')
unequal_int <- ggpubr::ggarrange(plot7,plot8,plot9,nrow = 1, ncol = 3, common.legend = T, legend = 'none')
ggsave(filename = 'unequal_int.tiff', plot = unequal_int, width = 3200, height = 1000, dpi = 'retina', units = 'px')
library(IBRAP)
library(ggplot2)
reference_results <- readRDS('reference_results.rds')
setwd("~/work/Results/scRNA-seq/IBRAP_publication/new_figures/Scripts/reference")
reference_results <- readRDS('reference_results.rds')
df <- data.frame(sample=c('celseq','celseq2','fluidigmc1','smartseq2','indrop1','indrop2','indrop3','indrop4',
'celseq','celseq2','fluidigmc1','smartseq2','indrop1','indrop2','indrop3','indrop4'),
clusters=c(3,1,2,1,0,2,2,1,7,4,8,7,7,5,4,5),
clustering=c('supervised','supervised','supervised','supervised','supervised','supervised','supervised',
'supervised',
'unsupervised','unsupervised','unsupervised','unsupervised','unsupervised','unsupervised',
'unsupervised','unsupervised'))
ggplot(data=df, aes(x=sample, y=clusters, fill=clustering)) +
geom_bar(stat="identity", position=position_dodge()) + egg::theme_article() +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 24),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 25))
ggsave(filename = 'barplot.tiff', plot = bar, device = 'tiff', dpi = 'retina', units = 'px')
bar <- ggplot(data=df, aes(x=sample, y=clusters, fill=clustering)) +
geom_bar(stat="identity", position=position_dodge()) + egg::theme_article() +
theme(axis.text.x = element_text(colour = 'black', angle = 90, hjust = 1,
face = 'bold', size = 24),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 25),
axis.text.y = element_text(colour = 'black', face = 'bold', size = 12),
legend.title = element_text(face = 'bold', color = 'black', size = 20),
legend.text = element_text(face = 'bold', color = 'black', size = 12),
axis.title.x.bottom = element_text(face = 'bold', size = 15),
axis.title.y.left = element_text(face = 'bold', size = 25))
ggsave(filename = 'barplot.tiff', plot = bar, device = 'tiff', dpi = 'retina', units = 'px')
ggsave(filename = 'barplot.tiff', plot = bar, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 600)
ggsave(filename = 'barplot.tiff', plot = bar, device = 'tiff', dpi = 'retina', units = 'px', width = 2400, height = 1200)
ref_GT <- plot.reduced.dim(object = reference_results$smartseq2_reference, reduction = 'PCA_BBKNN_BBKNN:UMAP', assay = 'SCT',
clust.method = 'metadata', column = 'celltype')
ggsave(filename = 'referenfce_GT.tiff', plot = ref_GT, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
singleR <- plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'singleR_labels_1')
ggsave(filename = 'singleR_annotation.tiff', plot = ref_GT, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
ggsave(filename = 'singleR_annotation.tiff', plot = singleR, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
optimals <- plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'optimal_clusters')
ggsave(filename = 'optimal_clustering.tiff', plot = optimals, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
smartseq2_GT <- plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'celltype')
ggsave(filename = 'query_GT.tiff', plot = smartseq2_GT, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
sctype_query <- plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'optimal_clusters')
ggsave(filename = 'query_scType.tiff', plot = sctype_query, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
sctype_query <-  plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'scType_RAW_counts'
sctype_query <-  plot.reduced.dim(object = reference_results$smartseq2, reduction = 'PCA_UMAP', assay = 'SCT', clust.method = 'metadata', column = 'scType_RAW_counts')
ggsave(filename = 'query_scType.tiff', plot = sctype_query, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
sctype_reference <- plot.reduced.dim(object = reference_results$smartseq2_reference, reduction = 'PCA_BBKNN_BBKNN:UMAP',
assay = 'SCT', clust.method = 'metadata', column = 'scType_RAW_counts')
ggsave(filename = 'reference_scType.tiff', plot = sctype_query, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
sctype_reference <- plot.reduced.dim(object = reference_results$smartseq2_reference, reduction = 'PCA_BBKNN_BBKNN:UMAP',
assay = 'SCT', clust.method = 'metadata', column = 'scType_RAW_counts')
ggsave(filename = 'reference_scType.tiff', plot = sctype_query, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
ggsave(filename = 'reference_scType.tiff', plot = sctype_reference, device = 'tiff', dpi = 'retina', units = 'px', width = 1200, height = 1200)
ls
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX")
pkgdown::build_article('GSEA')
pkgdown::build_article('perform_celltalker')
pkgdown::build_article('scType')
