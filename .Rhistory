gene.list[[x]] <- rownames(mat[,object@sample_metadata[,split.by] == x])
}
cat(crayon::cyan(paste0(Sys.time(), ': genes identified\n')))
cat(crayon::cyan(paste0(Sys.time(), ': corrections starting\n')))
}
integrated.corrected.data <- scanorama$correct(datasets_full = reticulate::r_to_py(list.matrix),
genes_list = reticulate::r_to_py(gene.list),
dimred = as.integer(n.dims),
return_dimred=TRUE,
return_dense=FALSE,
verbose = TRUE,
batch_size = as.integer(batch_size),
approx = approx,
sigma = as.integer(sigma),
alpha = as.numeric(alpha),
knn = as.integer(knn),
union = as.logical(union),
seed = as.integer(seed))
dims <- list()
cat(crayon::cyan(paste0(Sys.time(), ': isolating scanorama reduced dimensions\n')))
dim.names <- list()
for(c in 1:n.dims) {
dim.names[[c]] <- paste0('scanorama_', c)
}
dim.names <- unlist(dim.names)
for(x in 1:length(sep)) {
transposed <- t(reticulate::py_to_r(integrated.corrected.data)[[1]][[x]])
colnames(transposed) <- column.names[[x]]
rownames(transposed) <- dim.names
dims[[x]] <- transposed
}
if('_' %in% unlist(strsplit(x = reduction.save.suffix, split = ''))) {
reduction.save.suffix <- sub(pattern = '_', replacement = '-', x = reduction.save.suffix)
}
cat(crayon::cyan(paste0(Sys.time(), ': combining samples\n')))
combined <- do.call('cbind', dims)
cat(crayon::cyan(paste0(Sys.time(), ': samples concatenated\n')))
object@methods[[p]]@integration_reductions[[paste0('scanorama', reduction.save.suffix)]] <- t(combined)
}
return(object)
}
pancreas <- perform.scanorama(object = pancreas,
assay = c('SCT'),
slot = 'norm.scaled',
split.by = 'original.project',
n.dims = 50)
rm(perform.scanorama)
pancreas
pancreas@methods$SCT@integration_reductions
pancreas <- perform.scanorama(object = pancreas,
assay = c('SCT'),
slot = 'norm.scaled',
split.by = 'original.project',
n.dims = 50)
reticulate::py_discover_config()
pkgdown::build_site()
samp_tmp <- Read10X_output(directory = '/Users/knight05/Raw_Data/Database_samples/healthy_references/BMMC_atlas/marrow_A', matrix.file = 'matrix.mtx',
genes.file = 'genes.tsv', barcodes.file = 'barcodes.tsv')
samp <- createIBRAPobject(counts = samp_tmp, original.project = 'BMMC', min.cells = 3, min.features = 200)
samp <- add.cell.cycle(object = samp,
assay = 'RAW',
slot = 'counts',
transform = TRUE)
samp <- find_percentage_genes(object = samp)
plot.QC.vln(object = samp,
metadata.columns = c('RAW_total.features',
'RAW_total.counts',
'RAW_percent.mt'))
plot.QC.scatter(object = samp,
x = 'RAW_total.counts',
y = 'RAW_total.features',
split.by = 'original.project')
sd.value <- sd(samp$RAW_total.features)
med.value <- median(samp$RAW_total.features)
max.features <- (sd.value*3)+med.value
samp <- filter_IBRAP(object = samp,
RAW_total.features < max.features & RAW_total.counts > 200 & RAW_percent.mt < 8)
samp <- perform.sct(object = samp,
assay = 'RAW',
slot = 'counts',
vars.to.regress = 'RAW_percent.mt')
samp <- perform.scran(object = samp,
assay = 'RAW',
slot = 'counts',
vars.to.regress = c('RAW_total.counts','RAW_percent.mt'))
samp <- perform.scanpy(object = samp,
vars.to.regress = c('RAW_total.counts','RAW_percent.mt'))
samp <- perform.pca(object = samp,
assay = c('SCT', 'SCRAN', 'SCANPY'),
n.pcs = 50, reduction.save = 'pca')
samp <- perform.nn(object = samp,
assay = c('SCT', 'SCRAN', 'SCANPY'),
dims = list(20),
reduction = 'pca')
samp <- perform.graph.cluster(object = samp,
assay = c('SCT', 'SCRAN', 'SCANPY'),
neighbours = c('pca_nn'))
samp <- perform.umap(object = samp,
assay = c('SCT', 'SCRAN'),
reduction = c('pca'),
n.dims = list(20))
samp <- perform.umap(object = samp,
assay = c('SCANPY'),
graph = c('pca_nn'))
names(samp@methods$SCT@cluster_assignments$`pca_nn:louvain`)
samp <- perform.diffusion.map(object = samp, assay = c('SCT','SCRAN','SCANPY'), reduction = 'pca', dims = list(20))
pkgdown::build_site()
pkgdown::build_site()
as.integer(0.5)
as.numeric(0.5)
as.integer(0.55)
as.integer(0.5)
getwd()
roxygen2::roxygenise()
sc <- reticulate::import(module = 'scanpy')
sc$external$pp$bbknn(annoy_n_trees = 10)
prepare.reticulate
reticulate::py_module_available('scrublet')
reticulate::py_module_available('scanpy==1.8.1')
reticulate::import('sklearn')
reticulate::py_module_available('sklearn')
reticulate::py_module_available('scikit-learn')
reticulate::py_module_available('umap-learn')
reticulate::py_module_available('umap')
reticulate::py_module_available('umap')
reticulate::py_module_available('umap-learn')
reticulate::py_module_available('umap==0.5.1')
#' @name prepare.reticulate
#' @aliases prepare.reticulate
#'
#' @title Installs or identifies if python modules are installed
#'
#' @description This function checks if IBRAPs dependent packages in python are installed
#'
#' @export
prepare.reticulate <- function() {
reticulate::py_install('scrublet', pip = T)
if(isFALSE(reticulate::py_module_available('scrublet'))) {
cat(crayon::cyan('scrublet is not installed, please try manually: scrublet\n'))
} else {
cat(crayon::cyan('scrublet installed.\n'))
}
####################################################
reticulate::py_install('scanpy==1.8.1', pip = T)
if(isFALSE(reticulate::py_module_available('scanpy'))) {
cat(crayon::cyan('scanpy is not install, please try manually: scanpy==1.8.1\n'))
} else {
cat(crayon::cyan('scanpy installed.\n'))
}
####################################################
reticulate::py_install('bbknn==1.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('bbknn'))) {
cat(crayon::cyan('BBKNN is not install, please try manually: bbknn==1.5.1\n'))
} else {
cat(crayon::cyan('BBKNN installed.\n'))
}
####################################################
reticulate::py_install('scanorama==1.7.1', pip = T)
if(isFALSE(reticulate::py_module_available('scanorama'))) {
cat(crayon::cyan('scanorama is not install, please try manually: scanorama==1.7.1\n'))
} else {
cat(crayon::cyan('scanorama installed.\n'))
}
####################################################
reticulate::py_install('louvain==0.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('louvain'))) {
cat(crayon::cyan('louvain is not install, please try manually: louvain==0.7.0\n'))
} else {
cat(crayon::cyan('louvain installed.\n'))
}
}
####################################################
reticulate::py_install('annoy==1.16.0', pip = T)
if(isFALSE(reticulate::py_module_available('annoy'))) {
cat(crayon::cyan('annoy is not install, please try manually: annoy==1.16.0\n'))
} else {
cat(crayon::cyan('annoy installed.\n'))
}
####################################################
reticulate::py_install('umap-learn==0.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('umap'))) {
cat(crayon::cyan('umap-learn is not install, please try manually: umap-learn==0.5.1\n'))
} else {
cat(crayon::cyan('umap-learn installed.\n'))
}
####################################################
reticulate::py_install('pandas==1.1.5', pip = T)
if(isFALSE(reticulate::py_module_available('pandas'))) {
cat(crayon::cyan('pandas is not install, please try manually: pandas==1.1.5 \n'))
} else {
cat(crayon::cyan('pandas installed.\n'))
}
####################################################
reticulate::py_install('numpy==1.21.0', pip = T)
if(isFALSE(reticulate::py_module_available('numpy'))) {
cat(crayon::cyan('numpy is not install, please try manually: numpy==1.21.0 \n'))
} else {
cat(crayon::cyan('numpy installed.\n'))
}
####################################################
reticulate::py_install('numba==0.53.1', pip = T)
if(isFALSE(reticulate::py_module_available('numba'))) {
cat(crayon::cyan('numba is not install, please try manually: numba==0.53.1 \n'))
} else {
cat(crayon::cyan('numba installed.\n'))
}
####################################################
reticulate::py_install('matplotlib==3.4.2', pip = T)
if(isFALSE(reticulate::py_module_available('matplotlib'))) {
cat(crayon::cyan('matplotlib is not install, please try manually: matplotlib==3.4.2 \n'))
} else {
cat(crayon::cyan('matplotlib installed.\n'))
}
####################################################
reticulate::py_install('scipy==1.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('scipy'))) {
cat(crayon::cyan('scipy is not install, please try manually: scipy==1.7.0 \n'))
} else {
cat(crayon::cyan('scipy installed.\n'))
}
####################################################
reticulate::py_install('scikit-learn==0.24.2', pip = T)
if(isFALSE(reticulate::py_module_available('sklearn'))) {
cat(crayon::cyan('scikit-learn is not install, please try manually: scikit-learn==0.24.2 \n'))
} else {
cat(crayon::cyan('scikit-learn installed.\n'))
}
prepare.reticulate
prepare.reticulate()
reticulate::py_install(packages = 'scanpy==1.8.1')
#' @name prepare.reticulate
#' @aliases prepare.reticulate
#'
#' @title Installs or identifies if python modules are installed
#'
#' @description This function checks if IBRAPs dependent packages in python are installed
#'
#' @export
prepare.reticulate <- function() {
reticulate::py_install('scrublet', pip = T)
if(isFALSE(reticulate::py_module_available('scrublet'))) {
cat(crayon::cyan('scrublet is not installed, please try manually: scrublet\n'))
} else {
cat(crayon::cyan('scrublet installed.\n'))
}
####################################################
reticulate::py_install('scanpy==1.8.1')
if(isFALSE(reticulate::py_module_available('scanpy'))) {
cat(crayon::cyan('scanpy is not install, please try manually: scanpy==1.8.1\n'))
} else {
cat(crayon::cyan('scanpy installed.\n'))
}
####################################################
reticulate::py_install('bbknn==1.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('bbknn'))) {
cat(crayon::cyan('BBKNN is not install, please try manually: bbknn==1.5.1\n'))
} else {
cat(crayon::cyan('BBKNN installed.\n'))
}
####################################################
reticulate::py_install('scanorama==1.7.1', pip = T)
if(isFALSE(reticulate::py_module_available('scanorama'))) {
cat(crayon::cyan('scanorama is not install, please try manually: scanorama==1.7.1\n'))
} else {
cat(crayon::cyan('scanorama installed.\n'))
}
####################################################
reticulate::py_install('louvain==0.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('louvain'))) {
cat(crayon::cyan('louvain is not install, please try manually: louvain==0.7.0\n'))
} else {
cat(crayon::cyan('louvain installed.\n'))
}
}
####################################################
reticulate::py_install('annoy==1.16.0', pip = T)
if(isFALSE(reticulate::py_module_available('annoy'))) {
cat(crayon::cyan('annoy is not install, please try manually: annoy==1.16.0\n'))
} else {
cat(crayon::cyan('annoy installed.\n'))
}
####################################################
reticulate::py_install('umap-learn==0.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('umap'))) {
cat(crayon::cyan('umap-learn is not install, please try manually: umap-learn==0.5.1\n'))
} else {
cat(crayon::cyan('umap-learn installed.\n'))
}
####################################################
reticulate::py_install('pandas==1.1.5', pip = T)
if(isFALSE(reticulate::py_module_available('pandas'))) {
cat(crayon::cyan('pandas is not install, please try manually: pandas==1.1.5 \n'))
} else {
cat(crayon::cyan('pandas installed.\n'))
}
####################################################
reticulate::py_install('numpy==1.21.0', pip = T)
if(isFALSE(reticulate::py_module_available('numpy'))) {
cat(crayon::cyan('numpy is not install, please try manually: numpy==1.21.0 \n'))
} else {
cat(crayon::cyan('numpy installed.\n'))
}
####################################################
reticulate::py_install('numba==0.53.1', pip = T)
if(isFALSE(reticulate::py_module_available('numba'))) {
cat(crayon::cyan('numba is not install, please try manually: numba==0.53.1 \n'))
} else {
cat(crayon::cyan('numba installed.\n'))
}
####################################################
reticulate::py_install('matplotlib==3.4.2', pip = T)
if(isFALSE(reticulate::py_module_available('matplotlib'))) {
cat(crayon::cyan('matplotlib is not install, please try manually: matplotlib==3.4.2 \n'))
} else {
cat(crayon::cyan('matplotlib installed.\n'))
}
####################################################
reticulate::py_install('scipy==1.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('scipy'))) {
cat(crayon::cyan('scipy is not install, please try manually: scipy==1.7.0 \n'))
} else {
cat(crayon::cyan('scipy installed.\n'))
}
####################################################
reticulate::py_install('scikit-learn==0.24.2', pip = T)
if(isFALSE(reticulate::py_module_available('sklearn'))) {
cat(crayon::cyan('scikit-learn is not install, please try manually: scikit-learn==0.24.2 \n'))
} else {
cat(crayon::cyan('scikit-learn installed.\n'))
}
prepare.reticulate()
reticulate::py_install(packages ='scanpy==1.8.1')
reticulate::conda_version()
reticulate::py_install(packages = 'scanpy==1.8.1', pip=T)
reticulate::py_discover_config()
reticulate::py_install(packages = 'scanpy==1.8.1', conda = '"/opt/anaconda3/bin/conda"')
reticulate::py_module_available('scanpy')
reticulate::py_module_available('scanpy==1.8.1')
reticulate::py_module_available('scanpy==1.8.1')
#' @name prepare.reticulate
#' @aliases prepare.reticulate
#'
#' @title Installs or identifies if python modules are installed
#'
#' @description This function checks if IBRAPs dependent packages in python are installed
#'
#' @export
prepare.reticulate <- function() {
reticulate::py_install('scrublet', pip = T)
if(isFALSE(reticulate::py_module_available('scrublet'))) {
cat(crayon::cyan('scrublet is not installed, please try manually: scrublet\n'))
} else {
cat(crayon::cyan('scrublet installed.\n'))
}
####################################################
reticulate::py_install('scanpy==1.8.1', pip=T)
if(isFALSE(reticulate::py_module_available('scanpy'))) {
cat(crayon::cyan('scanpy is not install, please try manually: scanpy==1.8.1\n'))
} else {
cat(crayon::cyan('scanpy installed.\n'))
}
####################################################
reticulate::py_install('bbknn==1.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('bbknn'))) {
cat(crayon::cyan('BBKNN is not install, please try manually: bbknn==1.5.1\n'))
} else {
cat(crayon::cyan('BBKNN installed.\n'))
}
####################################################
reticulate::py_install('scanorama==1.7.1', pip = T)
if(isFALSE(reticulate::py_module_available('scanorama'))) {
cat(crayon::cyan('scanorama is not install, please try manually: scanorama==1.7.1\n'))
} else {
cat(crayon::cyan('scanorama installed.\n'))
}
####################################################
reticulate::py_install('louvain==0.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('louvain'))) {
cat(crayon::cyan('louvain is not install, please try manually: louvain==0.7.0\n'))
} else {
cat(crayon::cyan('louvain installed.\n'))
}
}
####################################################
reticulate::py_install('annoy==1.16.0', pip = T)
if(isFALSE(reticulate::py_module_available('annoy'))) {
cat(crayon::cyan('annoy is not install, please try manually: annoy==1.16.0\n'))
} else {
cat(crayon::cyan('annoy installed.\n'))
}
####################################################
reticulate::py_install('umap-learn==0.5.1', pip = T)
if(isFALSE(reticulate::py_module_available('umap'))) {
cat(crayon::cyan('umap-learn is not install, please try manually: umap-learn==0.5.1\n'))
} else {
cat(crayon::cyan('umap-learn installed.\n'))
}
####################################################
reticulate::py_install('pandas==1.1.5', pip = T)
if(isFALSE(reticulate::py_module_available('pandas'))) {
cat(crayon::cyan('pandas is not install, please try manually: pandas==1.1.5 \n'))
} else {
cat(crayon::cyan('pandas installed.\n'))
}
####################################################
reticulate::py_install('numpy==1.21.0', pip = T)
if(isFALSE(reticulate::py_module_available('numpy'))) {
cat(crayon::cyan('numpy is not install, please try manually: numpy==1.21.0 \n'))
} else {
cat(crayon::cyan('numpy installed.\n'))
}
####################################################
reticulate::py_install('numba==0.53.1', pip = T)
if(isFALSE(reticulate::py_module_available('numba'))) {
cat(crayon::cyan('numba is not install, please try manually: numba==0.53.1 \n'))
} else {
cat(crayon::cyan('numba installed.\n'))
}
####################################################
reticulate::py_install('matplotlib==3.4.2', pip = T)
if(isFALSE(reticulate::py_module_available('matplotlib'))) {
cat(crayon::cyan('matplotlib is not install, please try manually: matplotlib==3.4.2 \n'))
} else {
cat(crayon::cyan('matplotlib installed.\n'))
}
####################################################
reticulate::py_install('scipy==1.7.0', pip = T)
if(isFALSE(reticulate::py_module_available('scipy'))) {
cat(crayon::cyan('scipy is not install, please try manually: scipy==1.7.0 \n'))
} else {
cat(crayon::cyan('scipy installed.\n'))
}
####################################################
reticulate::py_install('scikit-learn==0.24.2', pip = T)
if(isFALSE(reticulate::py_module_available('sklearn'))) {
cat(crayon::cyan('scikit-learn is not install, please try manually: scikit-learn==0.24.2 \n'))
} else {
cat(crayon::cyan('scikit-learn installed.\n'))
}
prepare.reticulate()
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
reticulate::py_install('pandas==1.1.5', pip = T)
reticulate::py_module_available('pandas==1.1.5')
reticulate::py_install('pandas==1.1.5', pip = T)
reticulate::py_module_available('pandas==1.1.5')
reticulate::py_module_available('pandas')
pd <- reticulate::import('pandas==1.1.5')
rm(prepare.reticulate())
rm(prepare.reticulate
reticulate::py_discover_config()
pd <- reticulate::import('pandas==1.1.5')
reticulate::py_module_available('pandas==1.1.5')
reticulate::py_module_available('pandas')
reticulate::py_discover_config()
?reticulate::py_install
reticulate::miniconda_path()
reticulate::miniconda_path()
reticulate::conda_version()
reticulate::py_install('scanpy==1.8.1', pip=T)
reticulate::py_install('scanpy==1.8.1', pip=T, python_version = '3.8')
reticulate::install_miniconda()
reticulate::py_discover_config()
reticulate::use_python("/Users/knight05/Library/r-miniconda/envs/r-reticulate/bin/python3.8", required = T)
reticulate::use_python("/usr/local/opt/python@3.8/bin/python3.8", required = T)
reticulate::py_discover_config()
reticulate::py_install('scanpy==1.8.1', pip=T)
ls
reticulate::py_module_available('scanpy')
reticulate::py_module_available('scanpy==1.8.1')
reticulate::py_module_available('scanpy==1.7.2')
reticulate::py_module_available('scanpy==1.7.1')
reticulate::py_module_available('scanpy==1.7.0')
reticulate::py_module_available('bbknn==1.5.1')
reticulate::py_module_available('bbknn')
sc <- reticulate::import('scanpy')
print(sc.__version__)
print(sc$__version__)
sc$external$pp$bbknn
sc$external$pp$bbknn()
roxygen2::roxygenise()
sc <- reticulate::import('harmonypy')
sc <- reticulate::import('harmony')
sc <- reticulate::import('harmonypy', pip=T)
sc <- reticulate::install('harmonypy', pip=T)
sc <- reticulate::py_install('harmonypy', pip=T)
sc <- reticulate::py_install('harmonypy', pip=T)
reticulate::py_install('harmonypy', pip=T)
sc <- reticulate::import('harmonypy')
sc$Harmony
reticulate::py_discover_config()
library(IBRAP)
pancreas.data <- readRDS(file = "~/Raw_Data/pancreas_v3_files/pancreas_expression_matrix.rds")
metadata <- readRDS('~/Raw_Data/pancreas_v3_files/pancreas_metadata.rds')
reticulate::py_module_available('bbknn')
reticulate::py_module_available('scanpy')
sc <- reticulate::import('scanpy')
sc
sc$__version__
sc.__version__
sc <- reticulate::import('scanpy==1.7.2')
sc <- reticulate::import('scanpy==1.7.1')
reticulate::py_discover_config()
reticulate::py_discover_config()
reticulate::py_module_available('scanpy')
reticulate::use_python('/Users/knight05/Library/r-miniconda/envs/r-reticulate/bin/python3.8')
reticulate::use_python('/Users/knight05/Library/r-miniconda/envs/r-reticulate/bin/python3.8', required = T)
reticulate::use_python('/Users/knight05/Library/r-miniconda/envs/r-reticulate/bin/python3.8', required = T)
reticulate::py_discover_config()
