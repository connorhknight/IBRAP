for(u in tempo) {
tempor[[count]] <- tempo[[count]][3]
count <- count + 1
}
all_results[all_results$clustering_method %in% c('louvain','SLM','louvainMLR','leiden'),]$parameter <- unlist(tempor)
all_results$Score_scaled <- 100
for(x in unique(all_results$sample)) {
all_results[all_results$sample==x,]$Score_scaled <- scales::rescale(x = all_results[all_results$sample==x,]$Score, to = c(0,100))
}
all_results[all_results$sample=='pancreas',]
View(all_results[all_results$sample=='pancreas',])
View(all_results[all_results$sample=='equal',])
View(all_results[all_results$sample=='unequal',])
integrated_results <- all_results
datasets <- names(c(all_individual_samples))
clust.methods <- c('louvain', 'louvainMLR', 'SLM', 'leiden', 'pam+umap', 'kmeans+umap', 'normalised:sc3')
norm.methods <- c('RAW', 'SCT', 'SCRAN', 'SCANPY')
count <- 1
all_results <- data.frame(sample = character(), normalisation = character(), clustering_method = character(),
parameter = character(), ARI = numeric(), NMI = numeric(), ASW = numeric())
for(x in seq_along(datasets)[1:15]) {
for(t in 2:4) {
for(u in seq_along(clust.methods)) {
row.nam <- rownames(list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]])
for(m in 1:ncol(list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]])) {
all_results[count, 'sample'] <- datasets[x]
print('.')
all_results[count, 'normalisation'] <- norm.methods[t]
print('.')
all_results[count, 'clustering_method'] <- clust.methods[u]
print('.')
all_results[count, 'parameter'] <- row.nam[m]
print('.')
all_results[count, 'ARI'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][m,4]
print('.')
all_results[count, 'NMI'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][m,5]
print('.')
all_results[count, 'ASW'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][m,1]
print(count)
count <- count + 1
}
}
}
}
for(x in seq_along(datasets)[16:19]) {
for(t in 2:4) {
for(u in seq_along(clust.methods)) {
row.nam <- rownames(list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][['clustering']])
for(m in 1:ncol(list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][['clustering']])) {
all_results[count, 'sample'] <- datasets[x]
print('.')
all_results[count, 'normalisation'] <- norm.methods[t]
print('.')
all_results[count, 'clustering_method'] <- clust.methods[u]
print('.')
all_results[count, 'parameter'] <- row.nam[m]
print('.')
all_results[count, 'ARI'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][['clustering']][m,4]
print('.')
all_results[count, 'NMI'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][['clustering']][m,5]
print('.')
all_results[count, 'ASW'] <- list.of.objects.filt.2[[x]]@methods[[t]]@benchmark_results[[u]][['clustering']][m,1]
print(count)
count <- count + 1
}
}
}
}
all_results <- all_results[order(all_results$sample),]
list.of.results <- list()
for(i in datasets) {
list.of.results[[i]] <- all_results[all_results$sample==i,]
}
for(i in datasets) {
list.of.results[[i]]$ARI_rank <- rank(list.of.results[[i]]$ARI)
list.of.results[[i]]$NMI_rank <- rank(list.of.results[[i]]$NMI)
list.of.results[[i]]$ASW_rank <- rank(list.of.results[[i]]$ASW)
}
for(i in datasets) {
list.of.results[[i]]$Score <- apply(X = list.of.results[[i]][,c('ARI_rank','NMI_rank','ASW_rank')], MARGIN = 1, FUN = function(x) {
mean(x)
})
}
all_results <- do.call(rbind, list.of.results)
tempo <- strsplit(x = all_results[all_results$clustering_method %in% c('louvain','SLM','louvainMLR','leiden'),]$parameter, split = '_')
tempor <- list()
count <- 1
for(u in tempo) {
tempor[[count]] <- tempo[[count]][3]
count <- count + 1
}
all_results[all_results$clustering_method %in% c('louvain','SLM','louvainMLR','leiden'),]$parameter <- unlist(tempor)
all_results$Pipeline <- paste0(all_results$normalisation, '_', all_results$clustering_method, '_', all_results$parameter)
all_results$Score_scaled <- 100
for(x in unique(all_results$sample)) {
all_results[all_results$sample==x,]$Score_scaled <- scales::rescale(x = all_results[all_results$sample==x,]$Score, to = c(0,100))
}
unique(all_results$sample)
View(all_results[all_results$sample=='sc_10x'])
View(all_results[all_results$sample=='sc_10x',])
View(all_results[all_results$sample=='sc_10x_5cl',])
View(all_results[all_results$sample=='sc_CELseq2',])
View(all_results[all_results$sample=='sc_Dropseq',])
View(all_results[all_results$sample=='sc_Celseq2_5cl_p1',])
View(all_results[all_results$sample=='sc_Celseq2_5cl_p2',])
View(all_results[all_results$sample=='sc_Celseq2_5cl_p3',])
99 + 96 + 99 + 99 + 97 + 95 + 96
sum(99 + 96 + 99 + 99 + 97 + 95 + 96)/7
unique(all_results$sample)
View(all_results[all_results$sample=='celseq',])
View(all_results[all_results$sample=='celseq2',])
View(all_results[all_results$sample=='smartseq2',])
View(all_results[all_results$sample=='fluidigmc1',])
View(all_results[all_results$sample=='indrop1',])
View(all_results[all_results$sample=='indrop2',])
View(all_results[all_results$sample=='indrop3',])
View(all_results[all_results$sample=='indrop4',])
sum(90 + 96 + 73 + 92 + 97 + 95 + 97 + 97)/8
unique(all_results$sample)
View(all_results[all_results$sample=='sim.8_equal',])
View(all_results[all_results$sample=='sim.4_equal',])
View(all_results[all_results$sample=='sim.8_unequal',])
View(all_results[all_results$sample=='sim.4_unequal',])
reference_results <- readRDS("~/work/Results/scRNA-seq/IBRAP_publication/reference_results.rds")
reference_results
library(IBRAP)
ref_names <- colnames(reference_results[[16]]@methods$RAW@counts)
sup_names <- colnames(all_individual_samples$smartseq2@methods$SCT@counts)
tmp <- reference_results[[16]]@sample_metadata
tmp <- tmp[ref_names[ref_names %in% sup_names],]
tmp <- tmp[match(x = rownames(tmp), table = rownames(all_individual_samples$smartseq2@sample_metadata)),]
all_individual_samples$smartseq2@sample_metadata$singleR <- tmp$singleR_labels_1
opt <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'pca_nn:louvain', column = 'neighbourhood_graph_res.0.1', label.size = 5)
#' @name plot.reduced.dim
#' @aliases plot.reduced.dim.
#'
#' @title Plot of reduced dimensions and labels
#'
#' @param object An IBRAP S4 class object
#' @param reduction Character. Which reduction to use to display points
#' @param assay Character. Which assay within the object to access
#' @param clust.method Character. Which clustering method to access, supply the name of any dataframe contained in the cluster_assignments sections. If you wish to access metadata, just specify 'metadata'
#' @param column Character. Which column to access within the supplied clust.column
#' @param pt.size Numeric. What should the point size be
#' @param cells Numeric. Which cells should be subset for plotting, Default = NULL
#'
#' @return A plot of reduced dimensions annotated with assignments
#'
#' @export plot.reduced.dim
plot.reduced.dim <- function(object,
reduction,
assay,
clust.method,
column,
pt.size=0.5,
add.label = TRUE,
label.size = NULL,
cells = NULL) {
if(!is(object = object, class2 = 'IBRAP')) {
stop('object must be of class IBRAP\n')
}
if(isTRUE(add.label)) {
if(!is.null(label.size)) {
if(!is.numeric(label.size)) {
stop('label.size should be numeric\n')
}
}
}
if(!is.character(reduction)) {
stop('reduction must be character string\n')
}
if(!assay %in% names(object@methods)) {
stop('assay does not exist\n')
}
if(!reduction %in% names(c(object@methods[[assay]]@computational_reductions,
object@methods[[assay]]@visualisation_reductions,
object@methods[[assay]]@integration_reductions))) {
stop('reduction does not exist\n')
}
if(!is.character(clust.method)) {
stop('clust.method must be character string\n')
}
if(!clust.method %in% names(object@methods[[assay]]@cluster_assignments)) {
if(!clust.method == 'metadata') {
stop('clust.method does not exist\n')
}
}
if(!is.character(column)) {
stop('column must be character string\n')
}
if(!column %in% colnames(object@methods[[assay]]@cluster_assignments[[clust.method]])) {
if(!column %in% colnames(object@sample_metadata)) {
stop('column:', column, ', does not exist in clust.method: ', clust.method, '\n')
}
}
if(!is.numeric(pt.size)) {
stop('pt.size must be numerical\n')
}
reduction.list <- list()
red.names <- c(names(object@methods[[assay]]@computational_reductions),
names(object@methods[[assay]]@integration_reductions),
names(object@methods[[assay]]@visualisation_reductions))
for(i in red.names) {
if(i %in% names(object@methods[[assay]]@computational_reductions)) {
reduction.list[[i]] <- object@methods[[assay]]@computational_reductions[[i]]
}
if(i %in% names(object@methods[[assay]]@integration_reductions)) {
reduction.list[[i]] <- object@methods[[assay]]@integration_reductions[[i]]
}
if(i %in% names(object@methods[[assay]]@visualisation_reductions)) {
reduction.list[[i]] <- object@methods[[assay]]@visualisation_reductions[[i]]
}
}
if(clust.method == 'metadata') {
project.met <- object@sample_metadata
results <- as.data.frame(reduction.list[[reduction]])
results <- results[,1:2]
orig.names <- colnames(results)
results <- cbind(results, project.met[,column])
colnames(results) <- c(orig.names, 'variable')
rownames(results) <- colnames(object)
if(!is.null(cells)) {
results <- results[cells,]
}
} else {
results <- as.data.frame(reduction.list[[reduction]])
assay.met <- object@methods[[assay]]@cluster_assignments[[clust.method]]
assay.met <- assay.met[match(rownames(results), rownames(assay.met)),]
orig.names <- colnames(results)
results <- cbind(results, assay.met[,column])
colnames(results) <- c(orig.names, 'variable')
rownames(results) <- colnames(object)
if(!is.null(cells)) {
results <- results[cells,]
}
}
if(isTRUE(add.label)) {
clust_centres <- data.frame(clusters = unique(results$variable))
centre_1 <- list()
centre_2 <- list()
count <- 1
for(x in unique(results$variable)) {
centre_1[[count]] <- mean(results[results[,'variable'] == x,][,orig.names[1]])
centre_2[[count]] <- mean(results[results[,'variable'] == x,][,orig.names[2]])
count <- count + 1
}
clust_centres[,orig.names[1]] <- unlist(centre_1)
clust_centres[,orig.names[2]] <- unlist(centre_2)
clust_centres$variable <- unique(results$variable)
}
p <- ggplot2::ggplot(data = results,
mapping = ggplot2::aes_string(x = colnames(results)[1],
y = colnames(results)[2],
col = colnames(results)[3])) +
ggplot2::geom_point(size = pt.size) +
ggplot2::scale_color_manual(values = scales::hue_pal()(length(unique(results[,'variable'])))) +
ggplot2::theme_classic() +
ggplot2::theme(legend.title.align=0.5) +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=2)))
if(isTRUE(add.label)) {
if(is.null(label.size)) {
p <- p +
ggrepel::geom_label_repel(data = clust_centres, mapping =
ggplot2::aes_string(x = colnames(results)[1],
y = colnames(results)[2],
label = 'variable', fontface = 2),
color = 'black', label.size = NA, fill = NA,
box.padding = grid::unit(0.5, "lines")) +
ggplot2::theme(legend.position = "none")
} else {
p <- p +
ggrepel::geom_label_repel(data = clust_centres, mapping =
ggplot2::aes_string(x = colnames(results)[1],
y = colnames(results)[2],
label = 'variable', fontface = 2),
color = 'black', label.size = NA, fill = NA, size = label.size,
box.padding = grid::unit(0.5, "lines")) +
ggplot2::theme(legend.position = "none")
}
}
return(p)
}
opt <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'pca_nn:louvain', column = 'neighbourhood_graph_res.0.1', label.size = 5)
GT <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'metadata', column = 'celltype', label.size = 5)
singler <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'metadata', column = 'singleR', label.size = 5)
ref <- plot.reduced.dim(object = smartseq_ref, reduction = 'pca_bbknn_bbknn:umap',
assay = 'SCT', clust.method = 'metadata', column = 'celltype',
label.size = 5)
ref <- plot.reduced.dim(object = list.of.results[[16]], reduction = 'pca_bbknn_bbknn:umap',
assay = 'SCT', clust.method = 'metadata', column = 'celltype',
label.size = 5)
list.of.results
reference_results[[16]]
ref <- plot.reduced.dim(object = reference_results[[16]], reduction = 'pca_bbknn_bbknn:umap',
assay = 'SCT', clust.method = 'metadata', column = 'celltype',
label.size = 5)
smartseq_result <- reference_results[[16]]
smartseq_result <- perform.sct(object = smartseq_result, assay = 'RNA', slot = 'counts')
smartseq_result <- reference_results[[16]]
smartseq_result <- perform.sct(object = smartseq_result, assay = 'RNA', slot = 'counts')
smartseq_result <- perform.sct(object = smartseq_result, assay = 'RAW', slot = 'counts')
smartseq_result <- perform.pca(smartseq_result, assay = 'SCT', slot = 'norm.scaled')
unique(reference_results[[1]]@sample_metadata$dataset)
unique(reference_results[[8]]@sample_metadata$dataset)
unique(reference_results[[11]]@sample_metadata$dataset)
unique(reference_results[[10]]@sample_metadata$dataset)
unique(reference_results[[9]]@sample_metadata$dataset)
unique(reference_results[[8]]@sample_metadata$dataset)
unique(reference_results[[12]]@sample_metadata$dataset)
unique(reference_results[[13]]@sample_metadata$dataset)
unique(reference_results[[15]]@sample_metadata$dataset)
smartseq_result <- reference_results[[15]]
smartseq_result <- perform.sct(object = smartseq_result, assay = 'RAW', slot = 'counts')
smartseq_result <- perform.pca(smartseq_result, assay = 'SCT', slot = 'norm.scaled')
smartseq_result <- perform.bbknn(object = smartseq_result, assay = 'SCT', reduction = 'pca', batch = '')
smartseq_result <- perform.bbknn(object = smartseq_result, assay = 'SCT', reduction = 'pca', batch = 'dataset')
smartseq_result <- perform.bbknn(object = smartseq_result, assay = 'SCT', reduction = 'pca', batch = 'dataset')
smartseq_result <- perform.bbknn(object = smartseq_result, assay = 'SCT', reduction = 'pca', batch = 'dataset', n_pcs = list(0))
smartseq_result <- perform.umap(object = smartseq_result, assay = 'SCT', graph = 'pca_bbknn_bbknn')
ref <- plot.reduced.dim(object = smartseq_result, reduction = 'pca_bbknn_bbknn:umap',
assay = 'SCT', clust.method = 'metadata', column = 'celltype',
label.size = 5)
opt <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'pca_nn:louvain', column = 'neighbourhood_graph_res.0.1', label.size = 5)
GT <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'metadata', column = 'celltype', label.size = 5)
singler <- plot.reduced.dim(object = all_individual_samples$smartseq2, reduction = 'pca_umap', assay = 'SCT',
clust.method = 'metadata', column = 'singleR', label.size = 5)
opt_fig <- opt + ggtitle('Unsupervised Optimal Clustering') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
singler_fig <- singler + ggtitle('Supervised Clustering with singleR') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
GT_fig <- GT + ggtitle('Ground Truth') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
ref_fig <- ref + ggtitle('Reference') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
library(ggplot2)
opt_fig <- opt + ggtitle('Unsupervised Optimal Clustering') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
singler_fig <- singler + ggtitle('Supervised Clustering with singleR') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
GT_fig <- GT + ggtitle('Ground Truth') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
ref_fig <- ref + ggtitle('Reference') + theme(plot.title = element_text(face='bold', size = 20, hjust = 0.5),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(), axis.title = element_blank())
tmp_1 <- c(7,3,7,8,7,6,6,5)
tmp_3 <- c(3,0,1,1,0,0,0,0)
tmp_2 <- c('celseq','celseq2','smartseq2','fluidigmc1','indrop1','indrop2','indrop3','indrop4')
failed_celltypes_unsupervised <- as.data.frame(cbind(tmp_1, tmp_2))
failed_celltypes_unsupervised$analysis <- 'unsupervised'
colnames(failed_celltypes_unsupervised) <- c('cluster','dataset', 'analysis')
failed_celltypes_supervised <- as.data.frame(cbind(tmp_3, tmp_2))
failed_celltypes_supervised$analysis <- 'supervised'
colnames(failed_celltypes_supervised) <- c('cluster','dataset', 'analysis')
failed_celltypes <- rbind(failed_celltypes_supervised, failed_celltypes_unsupervised)
library(ggplot2)
failed_clusters <- ggplot(data = failed_celltypes, mapping = aes(y = cluster, x = dataset, fill = analysis)) +
geom_bar(position="dodge", stat="identity") +
theme_classic() +
ggtitle('Failed Cell Types - Supervised vs Unsupervised', subtitle = '') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 20)) +
xlab('Samples') +
ylab('Failed Clusters') +
theme(axis.title.x = element_text(face='bold',size=12),
axis.title.y = element_text(face='bold',size=12),
axis.text.y.left = element_text(face='bold',size=12),
axis.text.x.bottom = element_text(face='bold',size=12),
legend.text = element_text(face='bold',size=12),
legend.title = element_text(face='bold',size=12)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
failed_clusters
failed_clusters <- ggplot(data = failed_celltypes, mapping = aes(y = cluster, x = dataset, fill = analysis)) +
geom_bar(position="dodge", stat="identity") +
theme_classic() +
ggtitle('Failed Cell Types - Supervised vs Unsupervised', subtitle = '') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 20)) +
xlab('Samples') +
ylab('Failed Clusters') +
theme(axis.title.x = element_text(face='bold',size=12),
axis.title.y = element_text(face='bold',size=12),
axis.text.y.left = element_text(face='bold',size=12),
axis.text.x.bottom = element_text(face='bold',size=12),
legend.text = element_text(face='bold',size=12),
legend.title = element_text(face='bold',size=12)) +
expand_limits(y = 0)
failed_clusters
failed_clusters <- ggplot(data = failed_celltypes, mapping = aes(y = cluster, x = dataset, fill = analysis)) +
geom_bar(position="dodge", stat="identity") +
theme_classic() +
ggtitle('Failed Cell Types - Supervised vs Unsupervised', subtitle = '') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 20)) +
xlab('Samples') +
ylab('Failed Clusters') +
theme(axis.title.x = element_text(face='bold',size=12),
axis.title.y = element_text(face='bold',size=12),
axis.text.y.left = element_text(face='bold',size=12),
axis.text.x.bottom = element_text(face='bold',size=12),
legend.text = element_text(face='bold',size=12),
legend.title = element_text(face='bold',size=12)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 8))
failed_clusters
as.numeric(levels(failed_celltypes$cluster))
failed_celltypes$cluster
levels(failed_celltypes$cluster)
tmp_1 <- c(7,3,7,8,7,6,6,5)
tmp_3 <- c(3,0,1,1,0,0,0,0)
tmp_2 <- c('celseq','celseq2','smartseq2','fluidigmc1','indrop1','indrop2','indrop3','indrop4')
failed_celltypes_unsupervised <- as.data.frame(cbind(tmp_1, tmp_2))
failed_celltypes_unsupervised$analysis <- 'unsupervised'
colnames(failed_celltypes_unsupervised) <- c('cluster','dataset', 'analysis')
failed_celltypes_supervised <- as.data.frame(cbind(tmp_3, tmp_2))
failed_celltypes_supervised$analysis <- 'supervised'
colnames(failed_celltypes_supervised) <- c('cluster','dataset', 'analysis')
failed_celltypes <- rbind(failed_celltypes_supervised, failed_celltypes_unsupervised)
failed_celltypes$cluster
as.numeric(levels(as.numericfailed_celltypes$cluster)))
as.numeric(levels(as.numeric(failed_celltypes$cluster)))
levels(as.numeric(failed_celltypes$cluster))
as.numeric(failed_celltypes$cluster)
failed_celltypes$cluster <- as.numeric(failed_celltypes$cluster)
failed_celltypes$cluster <- as.numeric(failed_celltypes$dataset)
failed_celltypes
tmp_1 <- c(7,3,7,8,7,6,6,5)
tmp_3 <- c(3,0,1,1,0,0,0,0)
tmp_2 <- c('celseq','celseq2','smartseq2','fluidigmc1','indrop1','indrop2','indrop3','indrop4')
failed_celltypes_unsupervised <- as.data.frame(cbind(tmp_1, tmp_2))
failed_celltypes_unsupervised$analysis <- 'unsupervised'
colnames(failed_celltypes_unsupervised) <- c('cluster','dataset', 'analysis')
failed_celltypes_supervised <- as.data.frame(cbind(tmp_3, tmp_2))
failed_celltypes_supervised$analysis <- 'supervised'
colnames(failed_celltypes_supervised) <- c('cluster','dataset', 'analysis')
failed_celltypes <- rbind(failed_celltypes_supervised, failed_celltypes_unsupervised)
failed_celltypes
class(failed_celltypes)
failed_celltypes$cluster <- as.numeric(failed_celltypes$dataset)
tmp_1 <- c(7,3,7,8,7,6,6,5)
tmp_3 <- c(3,0,1,1,0,0,0,0)
tmp_2 <- c('celseq','celseq2','smartseq2','fluidigmc1','indrop1','indrop2','indrop3','indrop4')
failed_celltypes_unsupervised <- as.data.frame(cbind(tmp_1, tmp_2))
failed_celltypes_unsupervised$analysis <- 'unsupervised'
colnames(failed_celltypes_unsupervised) <- c('cluster','dataset', 'analysis')
failed_celltypes_supervised <- as.data.frame(cbind(tmp_3, tmp_2))
failed_celltypes_supervised$analysis <- 'supervised'
colnames(failed_celltypes_supervised) <- c('cluster','dataset', 'analysis')
failed_celltypes <- rbind(failed_celltypes_supervised, failed_celltypes_unsupervised)
as.numeric(failed_celltypes$cluster)
failed_celltypes$cluster <- as.numeric(failed_celltypes$cluster)
failed_celltypes
failed_clusters <- ggplot(data = failed_celltypes, mapping = aes(y = cluster, x = dataset, fill = analysis)) +
geom_bar(position="dodge", stat="identity") +
theme_classic() +
ggtitle('Failed Cell Types - Supervised vs Unsupervised', subtitle = '') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 20)) +
xlab('Samples') +
ylab('Failed Clusters') +
theme(axis.title.x = element_text(face='bold',size=12),
axis.title.y = element_text(face='bold',size=12),
axis.text.y.left = element_text(face='bold',size=12),
axis.text.x.bottom = element_text(face='bold',size=12),
legend.text = element_text(face='bold',size=12),
legend.title = element_text(face='bold',size=12)) +
expand_limits(y = 0)
failed_clusters
png('/Users/knight05/work/Results/scRNA-seq/IBRAP_publication/figures/integrated.png', width=1500, height=800)
supervised_1 <- ggpubr::ggarrange(ref_fig, singler_fig, opt_fig, GT_fig, ncol=2,nrow=2, labels = c('B','C','D','E'), font.label = list(size=24))
supervised_2 <- ggpubr::ggarrange(failed_clusters, supervised_1, nrow=1, ncol=2, labels = c('A', ''), font.label = list(size=24), widths = c(1,1.2))
ggpubr::annotate_figure(p=ggpubr::annotate_figure(p = supervised_2, top = ggpubr::text_grob("", size = 35)), top = ggpubr::text_grob("Supervised vs Unsupervised Clustering Analsysis", size = 35, face = 'bold'))
dev.off()
setwd("~/work/Results/scRNA-seq/IBRAP_development/IBRAPwithdecontX")
pkgdown::build_site()
reticulate::conda_create(
envname = "test",
packages = "python=3.7"
)
reticulate::use_condaenv('test')
reticulate::py_discover_config()
reticulate::use_python('/Users/knight05/Library/r-miniconda/envs/test/bin/python',required = T)
reticulate::conda_create(
envname = "test",
packages = "python=3.8"
)
reticulate::use_python("/Users/knight05/Library/r-miniconda/envs/test/bin/python",T)
reticulate::py_discover_config()
reticulate::py_config()
IBRAP::prepare.reticulate()
pkgdown::build_site()
pkgdown::build_site()
?kmeans
rank?
?rank
getwd()
roxygen2::roxygenise()
