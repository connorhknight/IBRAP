% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seurat_integration.R
\name{perform.seurat.cca}
\alias{perform.seurat.cca}
\alias{perform.seurat.integration}
\title{Performs Seurat Integration}
\usage{
perform.seurat.integration(
  object,
  assay,
  normalisation.method,
  batch,
  reduction.name.suffix = NULL,
  nfeatures = 2000,
  reduction = "cca",
  anchors.dims = 1:30,
  l2.norm = T,
  k.anchor = 5,
  k.filter = 200,
  k.score = 30,
  max.features = 200,
  nn.method = "annoy",
  n.trees = 50,
  anchor.eps = 0,
  features = NULL,
  integrate.dims = 1:30,
  k.weight = 100,
  sd.weight = 1,
  sample.tree = NULL,
  integrate.eps = 0
)
}
\arguments{
\item{object}{IBRAP S4 class object}

\item{assay}{Character. String containing indicating which assay to use}

\item{batch}{Character. Which column in the metadata defines the batches}

\item{nfeatures}{Numerical. How many features should be found as integration anchors. Default = 3000}

\item{reduction}{Character. Which reduction method to use: cca = canonical correlation analysis, rpca = reciprocal PCA, rlsi = Reciprocal LSE. Default = cca}

\item{l2.norm}{Logical. Perform L2 normalization on the CCA cell embeddings after dimensional reduction. Default = TRUE}

\item{k.anchor}{Numerical. How many neighbors (k) to use when picking anchors. Default = 5}

\item{k.filter}{Numerical. How many neighbors (k) to use when filtering anchors. Default = 200}

\item{k.score}{Numerical. How many neighbors (k) to use when scoring anchors. Default = 30}

\item{nn.method}{Character. Method for nearest neighbor finding. Options include: rann, annoy. Default = annoy}

\item{anchor.eps}{Numerical. Error bound on the neighbor finding algorithm (from RANN/Annoy) when finding integration genes.}

\item{features}{Character. Vector of features to use when computing the PCA to determine the weights. Only set if you want a different set from those used in the anchor finding process. Default = NULL}

\item{integrate.dims}{Numerical. Number of dimensions to use in the anchor weighting procedure. Default = 1:30}

\item{k.weight}{Numerical. Number of neighbors to consider when weighting anchors. Default = 100}

\item{sd.weight}{Numerical. Controls the bandwidth of the Gaussian kernel for weighting. Default = 1}

\item{sample.tree}{Character. Specify the order of integration. If NULL, will compute automatically. Default = NULL}

\item{integrate.eps}{Numerical. Error bound on the neighbor finding algorithm (from RANN)}

\item{max.features.}{Numerical. The maximum number of features to use when specifying the neighborhood search space in the anchor filtering. Default = 200}

\item{n.tree}{Numerical. More trees gives higher precision when using annoy approximate nearest neighbor search. Default = 50}
}
\value{
Produces a new 'methods' assay containing normalised, scaled and HVGs.
}
\description{
Performs Seurat integration on the supplied assay names. Results are saved under integration_reductions
}
\examples{
perform.seurat.cca <- function(object = object, 
                                         assay = c('SCT', 'SCRAN', 'SCANPY'), 
                                         normalisation.method = c('perform.sct', 'perform.scran', 'perform.scanpy'), 
                                         batch = original.project, 
                                         reduction.name.suffix=NULL,
                                         nfeatures = 3000,
                                         reduction = 'cca',
                                         anchors.dims = 1:30,
                                         l2.norm = T,
                                         k.anchor = 5,
                                         k.filter = 200,
                                         k.score = 30, 
                                         max.features = 200, 
                                         nn.method = 'annoy', 
                                         n.trees = 50, 
                                         anchor.eps = 0, 
                                         features = NULL,
                                         integrate.dims = 1:30,
                                         k.weight = 100,
                                         sd.weight = 1, 
                                         sample.tree = NULL, 
                                         integrate.eps = 0)

}
