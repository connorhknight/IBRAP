% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perform.seurat.cluster.R
\name{perform.graph.cluster}
\alias{perform.graph.cluster}
\title{Performs graph-based clustering}
\usage{
perform.graph.cluster(
  object,
  assay,
  neighbours,
  algorithm = 1,
  cluster.df.name.suffix = "",
  res = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5),
  verbose = FALSE,
  seed = 1234,
  ...
)
}
\arguments{
\item{object}{IBRAP S4 class object}

\item{assay}{Character. String containing indicating which assay to use}

\item{neighbours}{Character. String indicating which neighbourhood graphs should be used.}

\item{algorithm}{Numerical. Algorithm for modularity optimization (1 = original Louvain algorithm; 2 = Louvain algorithm with multilevel refinement; 3 = SLM algorithm; 4 = Leiden algorithm). Leiden requires the leidenalg python. Default = 1 Default = NULL}

\item{res}{Numerical vector. Which resolution to run the clusterign algorithm at, a smaller and larger value identified less and more clusters, respectively. Default = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5)}

\item{verbose}{Logical. Should system information be printed. Default = FALSE}

\item{seed}{Numeric. What should the seed be set as. Default = 1234}

\item{...}{arguments to be passed to Seurat::FindClusters}

\item{cluster.df.name}{Character. What to call the df contained in clusters. Default = 'seurat}
}
\value{
Cluster assignments using the list of resolutions provided contained within cluster_assignments under cluster.df.name
}
\description{
Performs graph-based clustering on previously generated neighbouhood graphs.
}
\examples{

object <- perform.nn.v1(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                        reduction = c('pca_harmony','scanorama'), 
                        dims = list(0,0), generate.diffmap = T)

object <- perform.nn.v1(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                        reduction = c('pca_bbknn_bbknn:diffmap','pca_harmony_nn.v1:diffmap', 'scanorama_nn.v1:diffmap'), 
                        dims = list(0,0,0))

object <- perform.nn.v2(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                       reduction = c('pca_harmony','scanorama','pca_bbknn_bbknn:diffmap',
                                     'pca_harmony_nn.v1:diffmap', 'scanorama_nn.v1:diffmap'), 
                       dims = list(0,0,0,0,0))
                       
object <- perform.graph.cluster(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                                neighbours = c("pca_bbknn_bbknn",
                                               "pca_harmony_nn.v1",
                                               "scanorama_nn.v1",
                                               "pca_bbknn_bbknn:diffmap_nn.v1",
                                               "pca_harmony_nn.v1:diffmap_nn.v1",
                                               "scanorama_nn.v1:diffmap_nn.v1",
                                               "pca_harmony_nn.v2",
                                               "scanorama_nn.v2",
                                               "pca_bbknn_bbknn:diffmap_nn.v2",
                                               "pca_harmony_nn.v1:diffmap_nn.v2",
                                               "scanorama_nn.v1:diffmap_nn.v2" ), 
                                algorithm = 1)

}
